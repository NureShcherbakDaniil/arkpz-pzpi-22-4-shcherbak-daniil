Харківський університет радіоелектроніки 
Факультет комп'ютерних наук 
Кафедра програмної інженерії 
 
 
 
ЗВІТ 
до практичної роботи номер 1 з дисципліни 
"Аналіз та рефакторинг коду" 
на тему: "Правила оформлення програмного коду" 
 
 
 
Виконав ст. гр ПЗПІ-22-4 
Щербак Данііл Сергійович 
 
Перевірив 
ст. викладач кафедри ПІ 
Сокорчук Ігор Петрович 
 
 
 
Харків 2024 
МЕТА 

Мета цієї практичної роботи полягає в тому, щоб розібратися з основними правилами написання та оформлення коду на PHP, зрозуміти, чому важливо дотримуватись стандартів форматування, а також навчитися застосовувати ці правила на практиці.
 
ВСТУП 

 	PHP – це популярна серверна мова програмування, яка широко використовується для розробки веб-додатків та динамічних сайтів. Оскільки її застосовують багато розробників у різних проектах, важливо дотримуватися певних правил оформлення коду для забезпечення його зрозумілості та підтримуваності. Ігнорування цих правил може призвести до виникнення труднощів у подальшій роботі над програмним продуктом, особливо якщо над ним працює команда.
Правила оформлення коду спрямовані на те, щоб зробити програмний код більш читабельним та структурованим. Це допомагає не лише знизити ризик появи помилок, але й спрощує внесення змін до коду в майбутньому. Уніфікований підхід до оформлення дозволяє різним розробникам швидше розуміти код своїх колег, що особливо важливо при спільній роботі над великими проєктами.
Деякі правила оформлення коду є універсальними та можуть використовуватися у різних мовах програмування. Проте кожна мова має свої особливості, які також впливають на стиль написання коду. У випадку з PHP існують спеціальні рекомендації, такі як PSR-стандарти, що допомагають забезпечити єдину стилістику написання програм. Важливо розуміти, що ці правила не є жорсткими обмеженнями, а скоріше інструментом для підвищення ефективності роботи над кодом та покращення його якості.
Таким чином, дотримання правил оформлення коду на PHP сприяє створенню якісних та підтримуваних програмних продуктів. Ці правила полегшують процес командної роботи, допомагають зберігати читабельність коду та зменшують час, необхідний для його подальшої підтримки й розвитку.
 	 





















РЕКОМЕНДАЦІЇ ДЛЯ НАПИСАННЯ КОДУ 
 
1. Використовуйте єдиний стиль іменування
Опис: Дотримання одного стилю іменування змінних, функцій та класів допомагає зробити код більш структурованим і легшим для розуміння іншими розробниками.
Приклад:
// Невдалий приклад
$userName = "John";  
$User_age = 25;  
$USEREMAIL = "example@example.com";  

// Вдалий приклад
$user_name = "John";  
$user_age = 25;  
$user_email = "example@example.com";

2. Уникайте надмірно довгих рядків коду
Опис: Довгі рядки коду важко читати і вони не поміщаються у вікно редактора, що знижує зручність роботи з кодом. Бажано розбивати довгі вирази на кілька рядків.
Приклад:
// Невдалий приклад
echo "This is a very long sentence that goes beyond the screen and makes it harder to read and understand.";

// Вдалий приклад
echo "This is a very long sentence " . 
     "that goes beyond the screen " . 
     "and makes it harder to read.";

3. Використовуйте зрозумілі імена для змінних і функцій
Опис: Імена змінних та функцій мають відображати їх призначення. Уникайте коротких та беззмістовних назв.
Приклад:
// Невдалий приклад
$a = 20;  
function doSomething() {}

// Вдалий приклад
$items_count = 20;  
function calculateTotalPrice() {}

4. Не використовуйте "магічні числа"
Опис: Числові значення в коді мають бути пояснені через константи або змінні для кращого розуміння та легшої підтримки.
Приклад:
// Невдалий приклад
if ($userAge > 18) {
    echo "Access granted";
}

// Вдалий приклад
const MINIMUM_AGE = 18;
if ($userAge > MINIMUM_AGE) {
    echo "Access granted";
}

5. Уникайте надмірних коментарів
Опис: Коментарі мають пояснювати складні моменти коду, а не очевидні речі. Чистий і зрозумілий код часто не потребує коментарів.
Приклад:
// Невдалий приклад
// Перевіряємо, чи користувач дорослий
if ($age >= 18) {
    echo "Adult user";
}

// Вдалий приклад
if ($age >= 18) {
    echo "Adult user"; // Коментар додається лише за потреби
}

6. Використовуйте строгі порівняння
Опис: Використовуйте строгі оператори порівняння (=== замість ==), щоб уникати неочікуваних результатів через автоматичне перетворення типів.
Приклад:
// Невдалий приклад
if ($value == "10") {
    echo "Matched";
}

// Вдалий приклад
if ($value === 10) {
    echo "Matched";
}
7. Використовуйте функції та методи для уникнення дублювання коду
Опис: Дублювання коду робить його важчим для підтримки. Замість копіювання одного і того ж коду кілька разів краще винести його в окрему функцію.
Приклад:
// Невдалий приклад
echo calculateDiscount(100);
echo calculateDiscount(200);

// Вдалий приклад
function calculateDiscount($amount) {
    return $amount * 0.1;
}

8. Використовуйте обробку помилок
Опис: Завжди враховуйте можливість виникнення помилок у вашому коді. Використовуйте конструкції try-catch для обробки виключень.
Приклад:
// Невдалий приклад
$conn = new mysqli($servername, $username, $password);

// Вдалий приклад
try {
    $conn = new mysqli($servername, $username, $password);
} catch (Exception $e) {
    echo "Connection failed: " . $e->getMessage();
}

9. Використовуйте PHP-стандарти кодування (PSR)
Опис: Дотримуйтесь загальноприйнятих стандартів PSR-1 та PSR-12 для підтримання єдиного стилю коду в проєктах.
Приклад:
// Невдалий приклад
function myFunction(){echo "Hello";}

// Вдалий приклад
function myFunction() {
    echo "Hello";
}

10. Уникайте глобальних змінних
Опис: Використання глобальних змінних може призвести до конфліктів у коді та складностей з його налагодженням. Використовуйте змінні у межах функцій або класів.
Приклад:
// Невдалий приклад
$globalValue = 100;

function calculate() {
    global $globalValue;
    return $globalValue * 2;
}

// Вдалий приклад
function calculate($value) {
    return $value * 2;
}		





	 
ВИСНОВКИ 
 	 
У ході виконання даної практичної роботи я детально ознайомився з основними рекомендаціями щодо оформлення коду на мові програмування PHP. Аналізуючи різні правила та стандарти написання коду, я зрозумів, наскільки важливо дотримуватися єдиного стилю програмування для забезпечення високої якості програмного продукту та зручності його подальшої підтримки.

Дотримання правил оформлення коду дозволяє створювати програмні рішення, які є більш читабельними, зрозумілими для інших розробників та менш схильними до помилок. Основні рекомендації, такі як використання єдиного стилю іменування змінних та функцій, уникнення дублювання коду, застосування обробки помилок та дотримання стандартів PSR, мають велике значення для ефективної командної роботи. Уніфікований підхід до написання коду дозволяє різним програмістам швидко зрозуміти логіку чужого коду, знижує ймовірність появи помилок і спрощує процес налагодження та оптимізації програмного забезпечення.

Одним із важливих аспектів, на який я звернув увагу, є необхідність уникати використання "магічних чисел" у коді. Використання таких чисел без пояснень ускладнює розуміння логіки роботи програми. Заміна їх на константи чи змінні з відповідними іменами значно підвищує читабельність коду та робить його більш зрозумілим. Також я дійшов висновку, що використання строгих порівнянь (=== замість ==) допомагає уникати непередбачених помилок, які можуть виникати в результаті автоматичного приведення типів у PHP.

Ще одним важливим моментом є необхідність уникати глобальних змінних. Глобальні змінні можуть створити конфлікти в коді, що призводить до складнощів у його підтримці. Замість цього слід використовувати локальні змінні у межах функцій або передавати значення через параметри функцій, що робить код більш захищеним і зрозумілим.

Також я зрозумів важливість використання коментарів у коді. Проте коментарі мають бути доречними та пояснювати лише складні моменти. Надмірна кількість коментарів або їх відсутність може ускладнити розуміння коду. Чистий, структурований і правильно відформатований код часто не потребує додаткових пояснень.

Виконання цієї практичної роботи дозволило мені зрозуміти, що правила оформлення коду є важливим елементом у процесі розробки програмного забезпечення. Вони не лише підвищують читабельність коду, а й допомагають створювати ефективні, масштабовані та підтримувані програмні рішення. Дотримуючись стандартів і рекомендацій, можна значно знизити ризик виникнення помилок у коді та прискорити процес його налагодження.

Отже, ця робота навчила мене не лише базових правил оформлення коду на PHP, а й основних принципів, які дозволяють зробити програмний продукт більш якісним та зручним для використання. У майбутньому я планую дотримуватись цих рекомендацій під час написання власного коду, що дозволить мені підвищити свою професійність як розробника та полегшить взаємодію з іншими членами команди у спільних проєктах. 







ДОДАТОК А 
Список використаних джерел 
 
	1. 	Посібник з PHP 
URL:  https://www.php.net/manual/uk/index.php 
 	  
 
ДОДАТОК Б 
Відео на YouTube 
 
https://youtu.be/ODtjPkihd0A 
ДОДАТОК В 
Презентація 
